name: Deployment (Partial Release)

permissions:
  contents: write

on:
  push:
    branches:
      - main

jobs:
  release:
    name: Partial Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [armv6, armv7, arm64]  # List of architectures to build for

    steps:
      - name: Checkout backend repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install ARM cross-compilation toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static gcc-arm-linux-gnueabi libc6-dev-armel-cross

      - name: Create temporary Python script
        run: |
          echo 'print("Hello from ${{ matrix.arch }}!")' > raspycam.py

      - name: Cross-compile for ARMv6, ARMv7, and ARM64
        run: |
          docker run --rm --privileged -v $(pwd):/src balenalib/raspberry-pi-${{ matrix.arch }}-debian python3 -m pip install pyinstaller
          docker run --rm --privileged -v $(pwd):/src balenalib/raspberry-pi-${{ matrix.arch }}-debian pyinstaller --onefile /src/raspycam.py

      - name: Archive build artifacts
        run: |
          mkdir -p release
          cp -r dist/raspycam ./release/raspycam-${{ matrix.arch }}
          tar -czvf release/raspycam-${{ matrix.arch }}.tar.gz -C release raspycam-${{ matrix.arch }}

      - name: Package the executables
        run: |
          cd release
          tar -czvf raspycam-multiarch.tar.gz raspycam-armv6.tar.gz raspycam-armv7.tar.gz raspycam-arm64.tar.gz

      - name: Generate GitHub draft release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          response=$(curl -s -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/kaihokori/raspycam/releases \
            -d '{
              "tag_name": "'${{ github.sha }}'",
              "name": "Release '${{ github.sha }}'",
              "prerelease": false,
              "draft": true,
              "generate_release_notes": true
            }')
          echo "$response" | jq -r '.upload_url' | sed 's/{?name,label}//' > upload_url.txt

      - name: Upload executables to GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          upload_url=$(cat upload_url.txt)
          curl -s --data-binary @release/raspycam-multiarch.tar.gz \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/octet-stream" \
            "$upload_url?name=raspycam-multiarch.tar.gz"

      - name: Clean up
        run: |
          rm -rf dist release new_tag upload_url.txt raspycam.py build __pycache__ raspycam.spec
