name: Deployment (Partial Release)

permissions:
  contents: write

on:
  push:
    branches:
      - main

jobs:
  release:
    name: Partial Release
    runs-on: ubuntu-latest

    strategy:
      matrix:
        arch: [armv6, armv7, arm64]  # List of architectures to build for

    steps:
      - name: Checkout backend repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies for cross-compilation
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static gcc-arm-linux-gnueabi gcc-aarch64-linux-gnu libc6-dev-armel-cross libc6-dev-arm64-cross

      - name: Set up Python environment and build executable
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install wheel rpi-libcamera rpi-kms picamera2 numpy Pillow opencv-python pyinstaller
          pyinstaller raspymjpeg.spec --noconfirm

      - name: Cross-compile for ARM architecture
        run: |
          # Set cross-compile options depending on architecture
          if [[ "${{ matrix.arch }}" == "armv6" ]]; then
            export CC=arm-linux-gnueabi-gcc
          elif [[ "${{ matrix.arch }}" == "armv7" ]]; then
            export CC=arm-linux-gnueabihf-gcc
          elif [[ "${{ matrix.arch }}" == "arm64" ]]; then
            export CC=aarch64-linux-gnu-gcc
          fi

          # Build the application for the current architecture
          pyinstaller --noconfirm raspymjpeg.spec

      - name: Archive build artifacts for each architecture
        run: |
          mkdir -p release/${{ matrix.arch }}
          cp -r dist/raspymjpeg ./release/${{ matrix.arch }}/raspymjpeg
          tar -czvf release/raspymjpeg-${{ matrix.arch }}.tar.gz -C release/${{ matrix.arch }} raspymjpeg

      - name: Generate GitHub draft release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          response=$(curl -s -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/kaihokori/raspycam/releases \
            -d '{
              "tag_name": "'${{ env.NEW_TAG }}'",
              "name": "Release '${{ env.NEW_TAG }}'",
              "prerelease": false,
              "draft": true,
              "generate_release_notes": true
            }')
          echo "$response" | jq -r '.upload_url' | sed 's/{?name,label}//' > upload_url.txt

      - name: Upload binaries to GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          upload_url=$(cat upload_url.txt)
          curl -s --data-binary @release/raspymjpeg-${{ matrix.arch }}.tar.gz \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/octet-stream" \
            "$upload_url?name=raspymjpeg-${{ matrix.arch }}.tar.gz"

      - name: Clean up
        run: |
          rm -rf dist build release venv __pycache__ raspymjpeg.spec
