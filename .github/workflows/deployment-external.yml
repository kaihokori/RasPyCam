name: Deployment (External)

permissions:
  contents: write

on:
  release:
    types:
      - published

jobs:
  release-cleanup:
    name: Release Cleanup
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
    
      - name: Clear Git cache
        run: |
          git rm -r --cached .
          git reset --hard

      - name: Delete all draft releases and their tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          releases=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v4+json" \
            https://api.github.com/repos/kaihokori/raspycam/releases \
            | jq -r '.[] | select(.draft == true) | .id,.tag_name')
          if [ -n "$releases" ]; then
            echo "$releases" | while read -r release_id && read -r tag_name; do
              echo "Deleting draft release with tag: $tag_name (ID: $release_id)"
              curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github.v4+json" \
                https://api.github.com/repos/kaihokori/raspycam/releases/$release_id
              git tag -d "$tag_name" || true
              git push origin --delete "$tag_name" || true
            done
          else
            echo "No draft releases found."
          fi

      - name: Delete tags without releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git fetch --tags
          all_tags=$(git tag)
          release_tags=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v4+json" \
            https://api.github.com/repos/kaihokori/raspycam/releases \
            | jq -r '.[].tag_name')
          echo "$all_tags" | while read -r tag; do
            if ! echo "$release_tags" | grep -q "$tag"; then
              echo "Deleting tag: $tag (no associated release)"
              git tag -d "$tag" || true
              git push origin --delete "$tag" || true
            fi
          done

  share:
    name: Share
    runs-on: self-hosted
    needs: release-cleanup
    steps:
      - name: Checkout backend repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: |
          sudo apt-get install -y gh
          
      - name: Download executables from release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          release_response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/kaihokori/raspycam/releases/latest)
          asset_url_arm=$(echo "$release_response" | jq -r '.assets[] | select(.name == "RasPyCam-ARM.tar.gz") | .browser_download_url')
          asset_url_arm64=$(echo "$release_response" | jq -r '.assets[] | select(.name == "RasPyCam-ARM64.tar.gz") | .browser_download_url')
          curl -L -o RasPyCam-ARM.tar.gz -H "Authorization: token $GITHUB_TOKEN" "$asset_url_arm"
          curl -L -o RasPyCam-ARM64.tar.gz -H "Authorization: token $GITHUB_TOKEN" "$asset_url_arm64"

      - name: Uncompress downloaded executables
        run: |
          mkdir raspycam_unzipped
          tar -xzf RasPyCam-ARM.tar.gz -C raspycam_unzipped
          tar -xzf RasPyCam-ARM64.tar.gz -C raspycam_unzipped

      - name: Sync fork with upstream and delete old branches
        env:
          PAT: ${{ secrets.PAT }}
          FORKED_REPO: ${{ vars.FORKED_REPO }}
          SOURCE_REPO: ${{ vars.SOURCE_REPO }}
        run: |
          git clone https://x-access-token:$PAT@github.com/$FORKED_REPO.git rpi_cam_web_interface
          cd rpi_cam_web_interface
          git fetch https://github.com/$SOURCE_REPO.git master
          git checkout master
          git merge FETCH_HEAD
          git branch -r | grep -v "master" | grep -v "\->" | sed 's/origin\///' | xargs -I {} git push origin --delete {}
          git push origin master --force

      - name: Clear Git cache
        run: |
          git rm -r --cached .
          git reset --hard

      - name: Sync fork with upstream using GitHub CLI
        env:
          FORKED_REPO: ${{ vars.FORKED_REPO }}
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          cd rpi_cam_web_interface
          git clone --filter=blob:none --no-checkout https://github.com/$FORKED_REPO.git
          cd rpi_cam_web_interface
          git sparse-checkout init --cone
          git sparse-checkout set etc/raspycam

      - name: Create new branch for update
        run: |
          git checkout -b update-raspycam-${{ github.event.release.tag_name }}

      - name: Resetting target directory
        run: |
          if [ -d "etc/raspycam" ]; then
            git checkout HEAD -- etc/raspycam
          else
            echo "Directory etc/raspycam does not exist, skipping reset."
          fi

      - name: Move executables to target directory
        run: |
            mkdir -p rpi_cam_web_interface/etc/raspycam
            mv raspycam_unzipped/RasPyCam-ARM rpi_cam_web_interface/etc/raspycam/arm
            mv raspycam_unzipped/RasPyCam-ARM64 rpi_cam_web_interface/etc/raspycam/arm64

      - name: Stage, Commit, and Push Changes
        id: commit_changes
        env:
          PAT: ${{ secrets.PAT }}
          FORKED_REPO: ${{ vars.FORKED_REPO }}
        run: |
          cd rpi_cam_web_interface
          git config user.name "$(git log -n 1 --pretty=format:%an)"
          git config user.email "$(git log -n 1 --pretty=format:%ae)"
          git add etc/raspycam
          if git diff-index --quiet HEAD; then
            echo "No changes to commit, exiting."
            echo "changes_made=false" >> $GITHUB_ENV
            exit 0
          else
            git commit -m "Updating RasPyCam to ${{ github.event.release.tag_name }}"
            git remote set-url origin https://x-access-token:$PAT@github.com/$FORKED_REPO.git
            git branch -M update-raspycam-${{ github.event.release.tag_name }}
            git push --set-upstream origin update-raspycam-${{ github.event.release.tag_name }}
            echo "changes_made=true" >> $GITHUB_ENV
          fi

      - name: Fetch Release Notes
        if: env.changes_made == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_URL="https://api.github.com/repos/kaihokori/raspycam/releases/tags/${{ github.event.release.tag_name }}"
          curl -s -H "Authorization: token $GITHUB_TOKEN" $RELEASE_URL | jq -r '.body' > release_notes
          tail -n +2 release_notes > release_notes_trimmed

      - name: Create PR body file
        if: env.changes_made == 'true'
        run: |
          echo "# Release Summary" > pr_body
          echo "" >> pr_body
          echo "This PR updates the RasPyCam executable to the latest version \`${{ github.event.release.tag_name }}\`, generated from the [RasPyCam](https://github.com/kaihokori/raspycam) repository." >> pr_body
          echo "" >> pr_body
          echo "## Changes Introduced" >> pr_body
          echo "" >> pr_body
          echo "1. **Change X:**" >> pr_body
          echo "   - [Text]" >> pr_body
          echo "" >> pr_body
          echo "## Additional Notes" >> pr_body
          echo "" >> pr_body
          echo "- **Manual Usage**: If you would like to manually test the application, please follow the instructions in the [RasPyCam](https://github.com/kaihokori/raspycam) README." >> pr_body
          echo "" >> pr_body
          echo "## Changelog" >> pr_body
          echo "" >> pr_body
          echo "The following is extracted from the official release notes of RasPyCam version \`${{ github.event.release.tag_name }}\` accessible [here](https://github.com/kaihokori/RasPyCam/releases/tag/${{ github.event.release.tag_name }}):" >> pr_body
          echo "" >> pr_body
          echo "" >> pr_body
          cat release_notes_trimmed >> pr_body
          echo "" >> pr_body

      - name: Create Draft Pull Request
        if: env.changes_made == 'true'
        env:
          PAT: ${{ secrets.PAT }}
          SOURCE_REPO: ${{ vars.SOURCE_REPO }}
        run: |
          gh auth login --with-token <<< "$PAT"
          gh pr create \
            --title "Update RasPyCam to ${{ github.event.release.tag_name }}" \
            --body-file pr_body \
            --base master \
            --head "kaihokori:update-raspycam-${{ github.event.release.tag_name }}" \
            --repo $SOURCE_REPO \
            --draft

      - name: Clean up
        run: |
          rm -rf raspycam_unzipped RasPyCam-ARM.tar.gz RasPyCam-ARM64.tar.gz rpi_cam_web_interface pr_body release_notes release_notes_trimmed
