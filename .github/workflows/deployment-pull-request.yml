name: Deployment (Draft Release)

permissions:
  contents: write

on:
  push:
    branches:
      - main

jobs:
  release:
    name: Draft Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout backend repository
        uses: actions/checkout@v4

      - name: Get latest tag
        id: get_tag
        run: |
          git fetch --tags
          latest_tag=$(git tag --sort=-v:refname | head -n 1)
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV

      - name: Bump version
        id: bump_version
        run: |
          if [ -z "${{ env.LATEST_TAG }}" ]; then
            echo "v1" > new_tag
          else
            version_number=$(echo "${{ env.LATEST_TAG }}" | grep -o '[0-9]*$')
            new_version=$((version_number+1))
            echo "v$new_version" > new_tag
          fi
          echo "NEW_TAG=$(cat new_tag)" >> $GITHUB_ENV

      - name: Create new tag
        run: |
          new_tag=$(cat new_tag)
          if git rev-parse "refs/tags/$new_tag" >/dev/null 2>&1; then
            echo "Tag $new_tag already exists. Skipping tag creation."
          else
            git tag $new_tag
            git push origin $new_tag
          fi

      - name: Build executable
        run: |
          mkdir -p dist
          echo 'testing' > dist/raspycam

      - name: Generate GitHub draft release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          response=$(curl -s -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/kaihokori/raspycam/releases \
            -d '{
              "tag_name": "'${{ env.NEW_TAG }}'",
              "name": "Release '${{ env.NEW_TAG }}'",
              "prerelease": false,
              "draft": true,
              "generate_release_notes": true
            }')
          echo "$response" | jq -r '.upload_url' | sed 's/{?name,label}//' > upload_url.txt

      - name: Upload executable to GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          upload_url=$(cat upload_url.txt)
          curl -s --data-binary @dist/raspycam \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/octet-stream" \
            "$upload_url?name=raspycam"

      - name: Clean up
        run: |
          rm -rf dist new_tag upload_url.txt
